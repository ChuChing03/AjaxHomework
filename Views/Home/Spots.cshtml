@{
    ViewData["Title"] = "Spots";
}

<h1>台北市景點</h1>



@section Styles{
    <style>


    </style>
}
@section Scripts{
    <script>
        // 定義要傳送的搜尋資料，以 JSON 格式表示
            const searchData = {
            "categoryId": 0,
            "keyword": "",
            "page": 1,
            "pageSize": 9,
            "sortBy": "SpotId",
            "sortType": "asc"
        };
        // 執行一個立即函式，用於發送 HTTP 請求
        (async () => {
            // 定義 API 端點的 URL
            const url = '@Url.Content("~/api/spots")'; // 注意：此處的 @Url.Content 是 ASP.NET Core 中的 Razor 語法，用於取得相對路徑的絕對 URL
            // 使用 fetch 函式發送 HTTP POST 請求到指定的 URL
            const response = await fetch(url, {
                method: 'POST', // 指定請求方法為 POST
                body: JSON.stringify(searchData), // 將 searchData 物件轉換為 JSON 字串 指定為 HTTP 請求的主體。這樣，當前端發送 請求到後端時，後端就能夠讀取 JSON 資料
                headers: {
                    //Content-Type 用於指定請求主體中的資料格式
                    //'application/json' 表示請求主體中資料是 JSON 格式
                    'Content-Type': 'application/json' 
                }
            });

            // 從 API 端點的回應中讀取 JSON 格式的資料
            const datas = await response.json();

            // 將回傳的資料輸出到控制台
            console.log(datas);
        })();

    </script>
}